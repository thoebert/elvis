{"version":3,"sources":["configs sync /^/.//.*/.json$","plSystemException.js","PLSystem.js","Turtle.js","MainComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["map","./BoxTree.json","./CesaroFractal.json","./DragonCurve.json","./GosperCurve.json","./HexaFlake.json","./IceFractal.json","./KochCurve.json","./KochSnowflake.json","./LindenmayerCurve.json","./Oak.json","./QuadraticType2Curve.json","./SierpinskiArrowheadCurve.json","./SpringTree.json","./Triangle.json","./Willow.json","./WinterTree.json","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","plSystemException","text","this","PLSystem","funcs","classCallCheck","axiom","productions","iterations","filterEmpty","split","isNaN","prods","expression","_wrapRegExp","head","condition","body","i","length","p","replace","matchObj","exec","groups","test","navigator","userAgent","RegExp","splitParam","sym","push","iter","newParts","prodindex","prod","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","findProduction","params","Symbol","iterator","next","done","match","value","scope","zipObject","paramvalues","checkProductionCondition","newPart","evalProduction","start","begin","end","err","return","sort","a","b","newaxiom","newPartiter","charAt","fs","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","f","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","paramlength","func","evalParamValues","param","exp","symbol","matches","index","indexOf","endIndex","indexBracket","substring","string","output","formula","isFormula","char","evalFormula","math","extendScope","toString","values","result","forEach","key","idx","list","filter","el","objectSpread","rand","Math","random","Turtle","scene","meshes","materials","lights","reset","pos","Vector3","Zero","dir","rot","stack","currentDiameter","currentLine","m","dispose","resetColors","clone","material","slice","v","pop","diameter","equals","finishCurrentLine","forward","cylinder","object","MeshBuilder","CreateTube","path","radius","sideOrientation","Mesh","DOUBLESIDE","cap","CAP_ALL","CreateLines","points","addInPlace","multiplyByFloats","angle","degtorad","x","y","z","sin","cos","size","box","CreateBox","position","rotation","r","g","setMaterial","Color3","color","emissiveColor","StandardMaterial","diffuseColor","White","specularColor","Black","type","direction","intensity","groundColor","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","d","l","HemisphericLight","FromArray","diffuse","DirectionalLight","PointLight","PI","MainComponent","props","_this","possibleConstructorReturn","getPrototypeOf","call","turtle","state","cube","setColor","setEmissiveColor","rotateZ","rotateY","rotateX","setVertical","onSceneMount","canvas","clearColor","camera","ArcRotateCamera","useFramingBehavior","framingBehavior","getBehaviorByName","framingTime","elevationReturnTime","attachControl","resized","paramChanged","configFileSelected","files","reader","FileReader","addEventListener","json","JSON","parse","target","processConfigData","setState","error","console","readAsText","loadPresetConfigFile","name","currentConfig","data","require","alpha","beta","Array","isArray","join","autorotate","getEngine","resize","productionChanged","axiomChanged","iterationsChanged","angleChanged","autorotationChanged","checked","lengthChanged","diameterChanged","handleConfigChanged","addLights","plsystem","produce","finalize","worldExtends","getWorldExtends","zoomOnBoundingInfo","min","max","useAutoRotationBehavior","autoRotationBehavior","idleRotationSpeed","handleSave","stringify","document","createElement","download","href","encodeURIComponent","appendChild","click","removeChild","horizontal","autorotation","configs","updatePredicate","bind","assertThisInitialized","window","removeEventListener","innerWidth","innerHeight","react_default","react_babylonjs_es5","canvasId","antialias","touchActionNone","width","height","_this2","index_es","component","variant","className","aria-label","htmlFor","CloudUpload_default","style","display","onChange","getElementById","onClick","event","Save_default","shrink","inputProps","fullWidth","label","margin","required","InputLabelProps","step","multiline","control","gutterBottom","_this3","lib_default","vertical","secondaryInitialSize","percentage","primaryIndex","onDragEnd","sidebar","engine","React","Component","App","theme","createMuiTheme","typography","useNextVariants","palette","styles","MainComponent_MainComponent","Boolean","location","hostname","ReactDOM","render","src_App","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45c80350.chunk.js","sourcesContent":["var map = {\n\t\"./BoxTree.json\": 803,\n\t\"./CesaroFractal.json\": 804,\n\t\"./DragonCurve.json\": 805,\n\t\"./GosperCurve.json\": 806,\n\t\"./HexaFlake.json\": 807,\n\t\"./IceFractal.json\": 808,\n\t\"./KochCurve.json\": 809,\n\t\"./KochSnowflake.json\": 810,\n\t\"./LindenmayerCurve.json\": 811,\n\t\"./Oak.json\": 812,\n\t\"./QuadraticType2Curve.json\": 813,\n\t\"./SierpinskiArrowheadCurve.json\": 814,\n\t\"./SpringTree.json\": 815,\n\t\"./Triangle.json\": 816,\n\t\"./Willow.json\": 817,\n\t\"./WinterTree.json\": 818\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 802;","export default function plSystemException(text) {\n    this.text = text;\n};","import plSystemException from './plSystemException';\nimport * as math from 'mathjs'\n\n/**\n * Processes symbols of pl-systems. Beginning with a given\n * axiom it applies the production rules and calls the functions\n * for the resulting symbols.\n * @class\n * @constructor\n * @public\n */\nexport default class PLSystem {\n\n    funcs;\n\n    /**\n     * Creates a new PLSystem with a list of productions and their functions.\n     * @param func a list of symbols (attribute sym),\n     *  parameter length (attribute paramlength)\n     *  and the actual function (attribute func)\n     */\n    constructor(funcs) {\n        this.funcs = funcs;\n    }\n\n    /**\n     * Applies the productions iteratively, beginning with the axiom and calls the production functions.\n     * @param axiom the axiom\n     * @param list of production rules\n     * @param iterations the number of iterations\n     */\n    produce(axiom, productions, iterations) {\n        productions = PLSystem.filterEmpty(productions.split('\\n'));\n        //console.log(axiom, productions, iterations);\n        if (isNaN(iterations) || iterations < 0) {\n            throw new plSystemException(\"Please enter a valid iteration number\");\n        }\n\n        // parse all production rules\n        let prods = [];\n        const expression = /(?<head>.*?)(:(?<condition>.*))?->(?<body>.*)/;\n        for (let i = 0; i < productions.length; i++) {\n            const p = productions[i].replace(/ /g, \"\");\n            const matchObj = expression.exec(p);\n            if (matchObj === null) {\n                throw new plSystemException(\"Invalid Production \" + i + \": Please enter a valid production of the syntax VARIABLE[(PARAM)][:CONDITION]->VARIABLES\");\n            }\n            let head = matchObj.groups.head;\n            let condition = matchObj.groups.condition;\n            var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n            if (!isSafari) {\n                if (condition) condition = condition.replace(RegExp(\"/(?<![=<>!])=(?!=)/\"), \"==\");\n            }\n            let body = matchObj.groups.body;\n            head = PLSystem.splitParam(head);\n            if (!head.sym || head.sym.length === 0) {\n                throw new plSystemException(\"Invalid Production \" + i + \": Please enter a valid production of the syntax VARIABLE[(PARAM)][:CONDITION]->VARIABLES\");\n            }\n            prods.push({head: head, condition: condition, body: body});\n        }\n\n        //console.log(prods);\n\n        // Applies the productions iteratively\n        for (let iter = 0; iter < iterations; iter++) {\n\n            // Find all production symbols and apply the production body\n            let newParts = [];\n            for (let prodindex = 0; prodindex < prods.length; prodindex++) {\n                let prod = prods[prodindex];\n                for (let match of PLSystem.findProduction(prod.head.sym, prod.head.params.length, axiom)) {\n                    let scope = PLSystem.zipObject(prod.head.params, match.paramvalues);\n                    if (PLSystem.checkProductionCondition(prod.condition, scope)) {\n                        let newPart = PLSystem.evalProduction(prod.body, scope);\n                        newParts.push({start: match.begin, end: match.end, text: newPart, prodindex: prodindex});\n                    }\n                }\n            }\n\n            // sort the resulting production results according to the original string position\n            newParts.sort((a, b) => {\n                if (a.start === b.start) return a.prodindex - b.prodindex;\n                return a.start - b.start;\n            });\n\n            //console.log(newParts);\n\n            // generate the resulting axiom\n            let newaxiom = '';\n            let newPartiter = 0;\n            for (let i = 0; i < axiom.length; i++) {\n                let newPart = newParts[newPartiter];\n                if (newPart !== undefined && i === newPart.start) {\n                    newaxiom += newPart.text;\n                    i = newPart.end - 1;\n                    newPartiter++;\n                    while (newParts[newPartiter] !== undefined && newParts[newPartiter].start === newPart.start) {\n                        newPartiter++;\n                    }\n                } else {\n                    newaxiom += axiom.charAt(i);\n                }\n            }\n            axiom = newaxiom;\n            //console.log(\"Iteration \" + (iter + 1) + ': ' + axiom);\n        }\n        // Parse the final axiom according to the available turtle commands\n        let fs = [];\n        for (let f of this.funcs) {\n            for (let match of PLSystem.findProduction(f.sym, f.paramlength, axiom)) {\n                fs.push({start: match.begin, func: f.func, paramvalues: match.paramvalues});\n            }\n        }\n        // Sort the parsed turtle commands according to the original turtle position\n        fs.sort((a, b) => {\n            if (a.start === b.start) return a.paramlength - b.paramlength;\n            return a.start - b.start;\n        });\n        // Call all turtle functions\n        for (let i = 0; i < fs.length; i++) {\n            let f = fs[i];\n            f.paramvalues = PLSystem.evalParamValues(f.paramvalues);\n            let param = f.paramvalues;\n            f.func(param);\n            while (fs[i + 1] !== undefined && f.start === fs[i + 1].start) {\n                i++;\n            }\n        }\n    }\n\n    /**\n     * Parses symbols: 'A(x,y)' -> {sym:'A',params:['x','y']}\n     * @param exp the expression to parse\n     * @returns {{sym: string, params: Array}}\n     */\n    static splitParam(exp) {\n        const expression = /(?<symbol>[^(]*)(\\((?<param>.*)\\))?/;\n        const matchObj = expression.exec(exp);\n        let sym = matchObj.groups.symbol;\n        if (sym === undefined) {\n            throw new plSystemException(\"Invalid expression: '\" + exp + \"'\");\n        }\n        let params = [];\n        if (matchObj.groups.param !== undefined) {\n            params = PLSystem.filterEmpty(matchObj.groups.param.split(','));\n        }\n        return {sym: sym, params: params};\n    }\n\n    /**\n     * Finds the production symbol with the given number of parameters in the axiom\n     * @param sym the symbol to find\n     * @param paramlength the number of parameters to find after the symbol\n     * @param axiom the axiom as search base\n     * @returns {Array} a list of searchresults\n     */\n    static findProduction(sym, paramlength, axiom) {\n        let start = 0;\n        let matches = [];\n        while (true) {\n            let paramvalues = [];\n            let index = axiom.indexOf(sym, start);\n            start = index + 1;\n            let endIndex = index + sym.length;\n            if (index === -1) break;\n            if (paramlength > 0) {\n                if (axiom.charAt(endIndex) !== '(') continue;\n                let indexBracket = axiom.indexOf(')', endIndex + 1);\n                if (indexBracket === -1) continue;\n                paramvalues = axiom.substring(endIndex + 1, indexBracket).split(',');\n                endIndex = indexBracket + 1;\n                paramvalues = PLSystem.filterEmpty(paramvalues);\n                if (paramvalues.length !== paramlength) continue;\n            }\n            matches.push({begin: index, end: endIndex, paramvalues: paramvalues});\n        }\n        return matches;\n    }\n\n    /**\n     * Evaluates the mathematical expression parameters of a production axiom\n     * @param string the axiom to evaluate\n     * @param scope the values of the variable for evaluation\n     * @returns {string} the same string with evaluated mathematical expressions\n     */\n    static evalProduction(string, scope) {\n        let output = '';\n        let formula = '';\n        let isFormula = false;\n        for (let index = 0; index < string.length; index++) {\n            let char = string.charAt(index);\n            switch (char) {\n                case '(':\n                    output += '(';\n                    isFormula = true;\n                    break;\n                case ')':\n                    output += PLSystem.evalFormula(formula, scope);\n                    output += ')';\n                    formula = '';\n                    isFormula = false;\n                    break;\n                case ',':\n                    output += PLSystem.evalFormula(formula, scope);\n                    output += ',';\n                    formula = '';\n                    break;\n                default:\n                    if (isFormula) {\n                        formula += char;\n                    } else {\n                        output += char;\n                    }\n                    break;\n            }\n        }\n        return output;\n    }\n\n    /**\n     * Checks a mathematical condition if it is true\n     * @param condition the mathematical expression to check\n     * @param scope the values of the variable for evaluation\n     * @returns {boolean} true if the expression is true, otherwise false\n     */\n    static checkProductionCondition(condition, scope) {\n        if (condition === undefined) return true;\n        try {\n            return (math.eval(condition, PLSystem.extendScope(scope)) === true);\n        } catch (e) {\n            throw new plSystemException(\"Condition error: \" + condition + ' ' + e.toString());\n        }\n    }\n\n    /**\n     * Evaluates a single mathematical expression\n     * @param formula the mathematical expression to evaluate\n     * @param scope the values of the variable for evaluation\n     * @returns {string} the result of the expression\n     */\n    static evalFormula(formula, scope) {\n        try {\n            return math.eval(formula, PLSystem.extendScope(scope));\n        } catch (e) {\n            throw new plSystemException(\"Formula error: \" + formula + ' ' + e.toString());\n        }\n    }\n\n    /**\n     * Zips key and values together to a new object\n     * @param keys the key for the new object\n     * @param values the values for the new object\n     */\n    static zipObject(keys, values) {\n        let result = {};\n        keys.forEach((key, idx) => result[key] = values[idx]);\n        return result;\n    }\n\n    /**\n     * Filters Empty strings from an array of string\n     * @param list the list to filter\n     * @returns [{string}] the resulting list\n     */\n    static filterEmpty(list) {\n        return list.filter((el) => (el !== null && el.length > 0));\n    }\n\n    /**\n     * Extends the Scope with a rand attribute with a random number\n     * @param scope the scope to extend\n     * @returns {...scope, {rand: number}} the resulting scope\n     */\n    static extendScope(scope) {\n        return {...scope, rand: Math.random()};\n    }\n\n    /**\n     * Evaluates a list of mathematical expressions\n     * @param params the list of expressions\n     * @returns [{string}] the same list with evaluated expressions\n     */\n    static evalParamValues(params) {\n        for (let i = 0; i < params.length; i++) {\n            let formula = params[i];\n            params[i] = PLSystem.evalFormula(formula, PLSystem.extendScope({}))\n        }\n        return params;\n    }\n}","import {\n    Vector3, MeshBuilder, Mesh, StandardMaterial, Color3,\n    HemisphericLight, DirectionalLight, PointLight\n} from \"babylonjs\";\n\n/**\n * A l-system turtle which can move or place objects. It is defined by its current position\n * rotation and the drawing parameters.\n * @class\n * @constructor\n * @public\n */\nexport default class Turtle {\n\n    scene;\n    pos;\n    dir;\n    rot;\n    material;\n    stack;\n    meshes;\n    materials;\n    currentLine;\n    currentDiameter;\n\n    /**\n     * Creates a turtle for the given scene with default values\n     * @param scene the scene where objects should be created\n     */\n    constructor(scene) {\n        this.scene = scene;\n        this.meshes = [];\n        this.materials = [];\n        this.lights = [];\n        this.reset();\n    }\n\n    /**\n     * Resets all turtle parameters\n     */\n    reset() {\n        this.pos = Vector3.Zero();\n        this.dir = new Vector3(0, 1, 0);\n        this.rot = new Vector3(0, 0, 0);\n        this.stack = [];\n        this.currentDiameter = -1;\n        this.currentLine = [];\n        for (let m of this.meshes) {\n            m.dispose();\n            m = null;\n        }\n        for (let m of this.materials) {\n            m.dispose();\n            m = null;\n        }\n        for (let m of this.lights) {\n            m.dispose();\n            m = null;\n        }\n        this.meshes = [];\n        this.materials = [];\n        this.lights = [];\n        this.resetColors();\n    }\n\n    /**\n     * Turns the turtle in a vertical orientation\n     */\n    setVertical() {\n        this.rot = new Vector3(0, 0, 0);\n        this.dir = new Vector3(0, 1, 0);\n    }\n\n    /**\n     * Pushes the current turtle parameters on the stack\n     */\n    push() {\n        this.stack.push({\n            pos: this.pos.clone(),\n            dir: this.dir.clone(),\n            rot: this.rot.clone(),\n            material: this.material,\n            currentLine: this.currentLine.slice(0),\n            currentDiameter: this.currentDiameter,\n        });\n    }\n\n    /**\n     * Pops the current turtle parameter from the stack\n     */\n    pop() {\n        let v = this.stack.pop();\n        if (!v) return;\n        this.dir = v.dir;\n        this.pos = v.pos;\n        this.rot = v.rot;\n        this.material = v.material;\n        this.currentLine = v.currentLine;\n        this.currentDiameter = v.currentDiameter;\n    }\n\n    /**\n     * Creates a cylinder at the current position of the turtle and moves the turtle\n     * to the end of the cylinder\n     * @param length the length of the cylinder\n     * @param diameter the diameter of the cylinder\n     */\n    cylinder(length, diameter) {\n        if (diameter < 0 || length < 0) return;\n        if (diameter === this.currentDiameter &&\n            this.currentLine.length > 0 &&\n            this.currentLine[this.currentLine.length - 1].equals(this.pos)\n        ) {\n        } else {\n            this.finishCurrentLine();\n            this.currentLine.push(this.pos.clone());\n            this.currentDiameter = diameter;\n        }\n        this.forward(length);\n        this.currentLine.push(this.pos.clone());\n    }\n\n    /**\n     * Creates a line at the current position of the turtle and moves the turtle\n     * to the end of the line\n     * @param length the length of the line\n     */\n    line(length) {\n        this.cylinder(length, 0);\n    }\n\n    /**\n     * Finishes the current line\n     */\n    finishCurrentLine() {\n        if (this.currentDiameter < 0 || this.currentLine.length < 0) return;\n        let object;\n        if (this.currentDiameter > 0) {\n            object = MeshBuilder.CreateTube(\"tube\",\n                {\n                    path: this.currentLine,\n                    radius: this.currentDiameter / 2,\n                    sideOrientation: Mesh.DOUBLESIDE,\n                    cap: Mesh.CAP_ALL\n                }, this.scene);\n\n        } else {\n            object = MeshBuilder.CreateLines(\"line\",\n                {points: this.currentLine}, this.scene);\n        }\n        object.material = this.material;\n        this.meshes.push(object);\n        this.currentLine = [];\n        this.currentDiameter = -1;\n    }\n\n    /**\n     * Moves the turtle forward\n     * @param length the distance which the turtle should be moved forwards\n     */\n    forward(length) {\n        this.pos.addInPlace(this.dir.multiplyByFloats(length, length, length));\n    }\n\n    /**\n     * Rotates the turtle a given angle around the x-axis\n     * @param angle the angle to rotate the turtle\n     */\n    rotateX(angle) {\n        angle = Turtle.degtorad(angle);\n        this.rot.x += angle;\n        let y = this.dir.y, z = this.dir.z;\n        let sin = Math.sin(angle), cos = Math.cos(angle);\n        this.dir.y = y * cos - z * sin;\n        this.dir.z = y * sin + z * cos;\n    }\n\n    /**\n     * Rotates the turtle a given angle around the y-axis\n     * @param angle the angle to rotate the turtle\n     */\n    rotateY(angle) {\n        angle = Turtle.degtorad(angle);\n        this.rot.y += angle;\n        let x = this.dir.x, z = this.dir.z;\n        let sin = Math.sin(angle), cos = Math.cos(angle);\n        this.dir.x = x * cos + z * sin;\n        this.dir.z = -x * sin + z * cos;\n    }\n\n    /**\n     * Rotates the turtle a given angle around the z-axis\n     * @param angle the angle to rotate the turtle\n     */\n    rotateZ(angle) {\n        angle = Turtle.degtorad(angle);\n        this.rot.z += angle;\n        let x = this.dir.x, y = this.dir.y;\n        let sin = Math.sin(angle), cos = Math.cos(angle);\n        this.dir.x = x * cos - y * sin;\n        this.dir.y = x * sin + y * cos;\n    }\n\n    /**\n     * Creates a cube at the current position of the turtle\n     * @param size the size of the turtle\n     */\n    cube(size) {\n        let box = MeshBuilder.CreateBox(\"box\", {size: size}, this.scene);\n        box.material = this.material;\n        box.position = this.pos.clone();\n        box.rotation = this.rot.clone();\n        this.meshes.push(box);\n    }\n\n    /**\n     * Sets the current drawing color of the turtle\n     * @param r the red value [0-1]\n     * @param g the green value [0-1]\n     * @param b the blue value [0-1]\n     */\n    setColor(r, g, b) {\n        this.setMaterial(new Color3(r, g, b));\n    }\n\n    /**\n     * Sets the current emissive drawing color of the turtle\n     * @param r the red value [0-1]\n     * @param g the green value [0-1]\n     * @param b the blue value [0-1]\n     */\n    setEmissiveColor(r, g, b) {\n        this.setMaterial(null, new Color3(r, g, b));\n    }\n\n    /**\n     * Resets all current drawing colors\n     */\n    resetColors() {\n        this.setMaterial();\n    }\n\n    /**\n     * Sets the current drawing material\n     * @param color the new current drawing color\n     * @param emissiveColor the new current emissive drawing color\n     */\n    setMaterial(color, emissiveColor) {\n        this.finishCurrentLine();\n        this.material = new StandardMaterial(\"material\", this.scene);\n        this.materials.push(this.material);\n        this.material.diffuseColor = (color ? color : Color3.White());\n        this.material.specularColor = this.material.diffuseColor;\n        this.material.emissiveColor = (emissiveColor ? emissiveColor : Color3.Black());\n    }\n\n    /**\n     * Converts an anle in degrees to radiants\n     * @param angle\n     * @returns {number}\n     */\n    static degtorad(angle) {\n        return angle * Math.PI / 180.0;\n    }\n\n    /**\n     * Finalizes the turtle drawing after the last movement\n     */\n    finalize() {\n        this.finishCurrentLine();\n    }\n\n    /**\n     * Adds lights to the scene\n     * @param lights the list of lights to add to the scene\n     */\n    addLights(lights) {\n        if (!lights || lights.length === 0) {\n            lights = [\n                {\n                    type: 'hemispheric',\n                    direction: [0, 20, 0],\n                    intensity: 0.7,\n                    diffuseColor: [0.3, 0.5, 0.6],\n                    groundColor: [0.5, 0.4, 0.25]\n                },\n                {\n                    type: 'directional',\n                    direction: [10, 20, 15],\n                    intensity: 0.5,\n                },\n                {\n                    type: 'point',\n                    position: [0, 2, 0],\n                    intensity: 1,\n                },\n            ];\n        }\n        for (let d of lights) {\n            let l;\n            switch (d.type) {\n                case 'hemispheric':\n                    if (!d.direction) break;\n                    l = new HemisphericLight(\"HemisphericLight\", Vector3.FromArray(d.direction), this.scene);\n                    if (d.diffuseColor) l.diffuse = Color3.FromArray(d.diffuseColor);\n                    if (d.groundColor) l.groundColor = Color3.FromArray(d.groundColor);\n                    break;\n                case 'directional':\n                    l = new DirectionalLight(\"DirectionalLight\", Vector3.FromArray(d.direction), this.scene);\n                    break;\n                case 'point':\n                    if (!d.position) break;\n                    l = new PointLight(\"PointLight\", Vector3.FromArray(d.position), this.scene);\n                    break;\n                default:\n                    break;\n            }\n            if (l) {\n                if (d && d.intensity) l.intensity = d.intensity;\n                this.lights.push(l);\n            }\n        }\n    }\n}","import \"./MainComponent.css\";\nimport 'pepjs'\nimport React from \"react\";\nimport SplitPane from \"react-splitter-layout\";\nimport \"react-splitter-layout/lib/index.css\";\nimport CloudUpload from \"@material-ui/icons/CloudUpload\";\nimport Save from \"@material-ui/icons/Save\";\nimport {\n    Typography, FormControl, Select, MenuItem, Link,\n    InputLabel, TextField, Fab, FormControlLabel, Checkbox\n} from \"@material-ui/core\";\nimport {Engine, Scene} from \"react-babylonjs\";\nimport {Vector3, ArcRotateCamera, Color3} from \"babylonjs\";\nimport PLSystem from \"./PLSystem\";\nimport Turtle from \"./Turtle\";\nimport plSystemException from \"./plSystemException\";\n\nexport default class MainComponent extends React.Component {\n    canvas;\n    scene;\n    camera;\n    plsystem;\n    turtle;\n    framingBehavior;\n    funcs = [\n        {sym: \"F\", paramlength: 2, func: (p) => this.turtle.cylinder(p[0], p[1])},\n        {sym: \"F\", paramlength: 1, func: (p) => this.turtle.cylinder(p[0], this.state.diameter)},\n        {sym: \"F\", paramlength: 0, func: (p) => this.turtle.cylinder(this.state.length, this.state.diameter)},\n        {sym: \"f\", paramlength: 1, func: (p) => this.turtle.forward(p[0])},\n        {sym: \"f\", paramlength: 0, func: (p) => this.turtle.forward(this.state.length)},\n\n        {sym: \"Box\", paramlength: 1, func: (p) => this.turtle.cube(p[0])},\n\n        {sym: \"Color\", paramlength: 3, func: (p) => this.turtle.setColor(p[0], p[1], p[2])},\n        {sym: \"EmColor\", paramlength: 3, func: (p) => this.turtle.setEmissiveColor(p[0], p[1], p[2])},\n        {sym: \"Color\", paramlength: 0, func: () => this.turtle.resetColors()},\n\n        {sym: \"+\", paramlength: 1, func: (p) => this.turtle.rotateZ(p[0])},\n        {sym: \"+\", paramlength: 0, func: () => this.turtle.rotateZ(this.state.angle)},\n        {sym: \"-\", paramlength: 1, func: (p) => this.turtle.rotateZ(-p[0])},\n        {sym: \"-\", paramlength: 0, func: () => this.turtle.rotateZ(-this.state.angle)},\n\n        {sym: \"&\", paramlength: 1, func: (p) => this.turtle.rotateY(p[0])},\n        {sym: \"&\", paramlength: 0, func: () => this.turtle.rotateY(this.state.angle)},\n        {sym: \"^\", paramlength: 1, func: (p) => this.turtle.rotateY(-p[0])},\n        {sym: \"^\", paramlength: 0, func: () => this.turtle.rotateY(-this.state.angle)},\n\n        {sym: \"/\", paramlength: 1, func: (p) => this.turtle.rotateX(p[0])},\n        {sym: \"/\", paramlength: 0, func: () => this.turtle.rotateX(this.state.angle)},\n        {sym: \"\\\\\", paramlength: 1, func: (p) => this.turtle.rotateX(-p[0])},\n        {sym: \"\\\\\", paramlength: 0, func: () => this.turtle.rotateX(-this.state.angle)},\n\n        {sym: \"|\", paramlength: 0, func: () => this.turtle.rotateZ(180)},\n        {sym: \"[\", paramlength: 0, func: () => this.turtle.push()},\n        {sym: \"]\", paramlength: 0, func: () => this.turtle.pop()},\n        {sym: \"$\", paramlength: 0, func: () => this.turtle.setVertical()}\n    ];\n\n    /**\n     * Cerates this MainComponent with the default state values\n     * @param props the properties of this react component\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            horizontal: true,\n            length: 3,\n            angle: 90,\n            diameter: 0,\n            autorotation: false,\n            configs: [\"BoxTree\", \"CesaroFractal\", \"DragonCurve\", \"GosperCurve\", \"HexaFlake\", \"KochCurve\",\n                \"KochSnowflake\", \"LindenmayerCurve\", \"Oak\", \"QuadraticType2Curve\", \"SierpinskiArrowheadCurve\",\n                \"SpringTree\", \"IceFractal\", \"Willow\", \"WinterTree\"],\n            error: \"\",\n            ...this.loadPresetConfigFile(\"BoxTree\")\n        };\n        this.plsystem = new PLSystem(this.funcs);\n        this.updatePredicate = this.updatePredicate.bind(this);\n    }\n\n    /**\n     * When the component is mounted, the event listeners are initialized\n     */\n    componentDidMount() {\n        this.updatePredicate();\n        window.addEventListener(\"resize\", this.updatePredicate);\n    }\n\n    /**\n     * When the component is unmounted, the event listeners are unloaded\n     */\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updatePredicate);\n    }\n\n    /**\n     * The predicate assigns the listener-values to the state.\n     */\n    updatePredicate() {\n        this.setState({ horizontal: (window.innerWidth/window.innerHeight > 1) });\n    }\n\n    /**\n     * Initializes all scene components after the scene is mounted\n     * @param e the event containing the canvas and scene\n     */\n    onSceneMount = (e) => {\n        const {canvas, scene} = e;\n        this.scene = scene;\n        this.canvas = canvas;\n\n        this.scene.clearColor = new Color3(0.07, 0.07, 0.07);\n\n        let camera = new ArcRotateCamera(\"Camera\",\n            91 * Math.PI / 180, 80 * Math.PI / 180, 10, new Vector3(0, 0, 0), this.scene);\n        this.camera = camera;\n        this.camera.useFramingBehavior = true;\n        this.framingBehavior = this.camera.getBehaviorByName(\"Framing\");\n        this.framingBehavior.framingTime = 0;\n        this.framingBehavior.elevationReturnTime = -1;\n        camera.attachControl(canvas);\n\n        this.turtle = new Turtle(this.scene);\n        this.resized();\n        this.paramChanged();\n\n        //this.scene.debugLayer.show();\n    }\n\n    /**\n     * Loads a config file from the local system\n     * @param files the list of files on the file system\n     */\n    configFileSelected = (files) => {\n        if (!files || files.length === 0) return;\n        let reader = new FileReader();\n        reader.addEventListener(\"load\", (e) => {\n            try {\n                let json = JSON.parse(e.target.result);\n                let state = this.processConfigData(json, \"manual\");\n                this.setState({...state}, this.paramChanged);\n                e.target.value = null;\n            } catch (error) {\n                console.error(error);\n            }\n        });\n        reader.readAsText(files[0]);\n    }\n\n    /**\n     * Loads a config file from the source config folder and returns the loaded values\n     * @param name the name of the configuration\n     * @returns the loaded values as object\n     */\n    loadPresetConfigFile = (name) => {\n        if (name === \"manual\") return {currentConfig: name};\n        let data = require(\"./configs/\" + name + \".json\");\n        if (data) return this.processConfigData(data, name);\n        return {};\n    }\n\n    /**\n     * Applies the config parameters\n     * @param data the config parameters\n     * @param name the name of the config\n     * @returns the data of the transformed config\n     */\n    processConfigData = (data, name) => {\n        if (this.camera) {\n            this.camera.alpha = 91 * Math.PI / 180;\n            this.camera.beta = 80 * Math.PI / 180;\n        }\n        if (data.productions && Array.isArray(data.productions)) {\n            data.productions = data.productions.join(\"\\n\");\n        }\n        data.currentConfig = name;\n        if (!data.autorotate) data.autorotate = false;\n        if (!data.lights) data.lights = [];\n        return data;\n    }\n\n    /**\n     * Forces the engine to resize the render frame\n     */\n    resized = () => {\n        this.scene.getEngine().resize();\n    }\n\n    // BEGINNING OF CHANGE LISTENERS FOR PARAMETER GUI\n\n    productionChanged = (e) => {\n        this.setState({productions: e.target.value, currentConfig: \"manual\"}, this.paramChanged);\n    }\n\n    axiomChanged = (e) => {\n        this.setState({axiom: e.target.value, currentConfig: \"manual\"}, this.paramChanged);\n    }\n\n    iterationsChanged = (e) => {\n        this.setState({iterations: e.target.value, currentConfig: \"manual\"}, this.paramChanged);\n    }\n\n    angleChanged = (e) => {\n        this.setState({angle: e.target.value, currentConfig: \"manual\"}, this.paramChanged);\n    }\n\n    autorotationChanged = (e) => {\n        this.setState({autorotate: e.target.checked, currentConfig: \"manual\"}, this.paramChanged);\n    }\n\n    lengthChanged = (e) => {\n        this.setState({length: e.target.value, currentConfig: \"manual\"}, this.paramChanged);\n    }\n\n    diameterChanged = (e) => {\n        this.setState({diameter: e.target.value, currentConfig: \"manual\"}, this.paramChanged);\n    }\n\n    handleConfigChanged = (e) => {\n        this.setState({...this.loadPresetConfigFile(e.target.value)}, this.paramChanged);\n    }\n\n    // END OF CHANGE LISTENERS\n\n    /**\n     * Applies a parameter change of the user to the view\n     */\n    paramChanged = () => {\n        this.turtle.reset();\n        this.turtle.addLights(this.state.lights);\n        const prods = this.state.productions;\n        try {\n            this.plsystem.produce(this.state.axiom, prods, this.state.iterations);\n            this.turtle.finalize();\n            this.setState({error: \"\"});\n            let worldExtends = this.scene.getWorldExtends();\n            let a = this.camera.alpha, b = this.camera.beta;\n            this.framingBehavior.zoomOnBoundingInfo(worldExtends.min, worldExtends.max);\n            this.camera.alpha = a;\n            this.camera.beta = b;\n            this.camera.radius = this.camera.radius * 0.8;\n            if (this.state.autorotate) {\n                this.camera.useAutoRotationBehavior = true;\n                this.camera.autoRotationBehavior.idleRotationSpeed = 0.2;\n            } else {\n                this.camera.useAutoRotationBehavior = false;\n            }\n        } catch (e) {\n            if (typeof e === \"object\" && e instanceof plSystemException) {\n                this.setState({error: e.text});\n            } else {\n                throw e;\n            }\n        }\n    }\n\n    /**\n     * Creates a json-file with the current parameters and downloads it to the local file system\n     */\n    handleSave = () => {\n        let data = {\n            iterations: this.state.iterations,\n            axiom: this.state.axiom,\n            productions: PLSystem.filterEmpty(this.state.productions.split(\"\\n\")),\n            angle: this.state.angle,\n            diameter: this.state.diameter,\n            length: this.state.length,\n            autorotate: this.state.autorotate\n        };\n        let json = JSON.stringify(data, null, 2);\n        let filename = \"config.json\";\n        let contentType = \"application/json;charset=utf-8;\";\n        let a = document.createElement(\"a\");\n        a.download = filename;\n        a.href = \"data:\" + contentType + \",\" + encodeURIComponent(json);\n        a.target = \"_blank\";\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n    }\n\n    /**\n     * Returns the babylonjs react component\n     * @returns {*} the babylonjs react component\n     */\n    engine(){\n        return(\n            <Engine canvasId=\"canvas\" antialias={true} touchActionNone={true} width=\"100%\" height=\"100%\">\n                <Scene onSceneMount={this.onSceneMount}>\n                </Scene>\n            </Engine>\n        )\n    }\n\n    /**\n     * Returns the sidebar plus its components\n     * @returns {*} the sidebar\n     */\n    sidebar(){\n        return(\n            <FormControl id=\"sidebar\">\n                <div id=\"configbar\">\n                    <Typography component=\"h1\" variant=\"h4\" className=\"fill-width\">pL-System</Typography>\n                    <Fab aria-label=\"Upload\" size=\"small\">\n                        <label htmlFor=\"fileload\">\n                            <CloudUpload/>\n                        </label>\n                        <input type=\"file\" className=\"custom-file-input\" style={{display: \"none\"}} id=\"fileload\"\n                               onChange={() =>\n                                   this.configFileSelected(document.getElementById(\"fileload\").files)}\n                               onClick={event => {\n                                   event.target.value = null\n                               }}/>\n                    </Fab>\n                    <Fab aria-label=\"Save\" size=\"small\" onClick={this.handleSave}><Save/></Fab>\n                </div>\n\n                <div className=\"inputGroup\">\n                    <InputLabel shrink htmlFor=\"configuration\">Configuration</InputLabel>\n                    <Select value={this.state.currentConfig} onChange={this.handleConfigChanged}\n                            inputProps={{id: \"configuration\"}} fullWidth>\n                        <MenuItem key=\"manual\" value=\"manual\"><em>Manual</em></MenuItem>\n                        {this.state.configs.map((el, i) => (<MenuItem key={el} value={el}>{el}</MenuItem>))}\n                    </Select>\n                </div>\n\n                <TextField label=\"Iterations\" fullWidth margin=\"normal\" type=\"number\" required\n                           value={this.state.iterations} onChange={this.iterationsChanged}\n                           InputLabelProps={{shrink: true,}} inputProps={{step: 1,}}/>\n\n                <TextField multiline label=\"Axiom\" margin=\"normal\" fullWidth required\n                           value={this.state.axiom} onChange={this.axiomChanged}/>\n\n                <TextField multiline label=\"Productions\" fullWidth margin=\"normal\" required\n                           value={this.state.productions} onChange={this.productionChanged}/>\n\n                <FormControlLabel\n                    className={\"checkboxgroup\"}\n                    control={\n                        <Checkbox checked={this.state.autorotate} onChange={this.autorotationChanged}/>\n                    }\n                    label=\"Auto Rotation\"/>\n\n                <TextField label=\"Default Angle\" fullWidth margin=\"normal\" type=\"number\" required\n                           value={this.state.angle} onChange={this.angleChanged}\n                           InputLabelProps={{shrink: true,}} inputProps={{step: 1,}}/>\n\n                <TextField label=\"Default Length\" fullWidth margin=\"normal\" type=\"number\" required\n                           value={this.state.length} onChange={this.lengthChanged}\n                           InputLabelProps={{shrink: true,}} inputProps={{step: 1,}}/>\n\n                <TextField label=\"Default Diameter\" fullWidth margin=\"normal\" type=\"number\" required\n                           value={this.state.diameter} onChange={this.diameterChanged}\n                           InputLabelProps={{shrink: true,}} inputProps={{step: 1,}}/>\n\n                <Typography color=\"error\" variant=\"body1\" gutterBottom>{this.state.error}</Typography>\n\n                <Typography component=\"h1\" variant=\"h4\" className=\"fill-width\">Description</Typography>\n                <Typography className=\"description\">\n                    Beginning with the axiom, in each iteration all symbols are replaced according to the production\n                    rules, see <Link href={\"https://en.wikipedia.org/wiki/L-system#Example_1:_Algae\"}>Wikipedia</Link>.\n                    The resulting symbols are successively interpreted to move the cursor or place an geometric object.\n                </Typography>\n                <Typography className=\"description\">\n                    A list of the available symbols can be accessed <Link href={\"https://github.com/thoebert/elvis/blob/master/README.md#syntax\"}>here</Link>.\n                </Typography>\n\n            </FormControl>\n        )\n    }\n\n    /**\n     * Renders this react component\n     * @returns {*} the components contents\n     */\n    render() {\n        if (this.state.horizontal){\n            return (\n                <SplitPane vertical={false} secondaryInitialSize={30} percentage primaryIndex={1} onDragEnd={() => this.resized()}>\n                    {this.sidebar()}\n                    {this.engine()}\n                </SplitPane>\n            )\n        } else {\n            return (\n                <div className=\"layout-pane vertical\">\n                    {this.engine()}\n                    {this.sidebar()}\n                </div>\n            )\n        }\n\n    }\n}","import React from 'react';\nimport MainComponent from \"./MainComponent\";\n\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\n\nfunction App() {\n\n    const theme = createMuiTheme({\n        typography: {\n            useNextVariants: true,\n        },\n        palette: {\n            type: 'dark',\n        }\n    });\n\n    return (\n        <MuiThemeProvider theme={theme}>\n            <MainComponent/>\n        </MuiThemeProvider>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}